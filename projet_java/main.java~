
import java.util.*;
import java.io.*;
public class main{
    public static int [][] matrice;
    public static void main(String []args){
	int n=14;
	int x,i,j;
	int indice;
	matrice = new int[n][n];
	for(indice = 0; indice<n; indice++){
	    ListeVille.addVille(new Ville(indice));
	}
		for (i=0; i<n; i++){
	    for(j=0;j<n;j++){
		if (i==j){
		    matrice[i][j]=101;
		}
		else{
		    x = (int)(Math.random()*100);
		    matrice[i][j] = x+1;
		    matrice[j][i] = x+1;
		}
	    }
	    }
		/*while (n<=50){

	    System.out.print("-------------------------------------\n");
	    System.out.print("|     Pour n egal a : "+n+"          \n|");
	    System.out.print("-------------------------------------\n");
	    for (int g =1; g<=10;g++){
		System.out.print("-------------------------------------\n");
		System.out.print("|     Tour numero : "+g+"            \n|");
		System.out.print("-------------------------------------\n");
		String chaine="";
		String dossier = System.getProperty("user.dir");
		String fichier =dossier+"/Test/"+n+"_fic_"+g+".txt";
		//lecture du fichier texte	
		try{
		    InputStream ips=new FileInputStream(fichier); 
		    InputStreamReader ipsr=new InputStreamReader(ips);
		    BufferedReader br=new BufferedReader(ipsr);
		    String ligne;
		    while ((ligne=br.readLine())!=null){
			chaine+=ligne+"\n";
		    }
		    br.close(); 
		}		
		catch (Exception e){
		    System.out.println(e.toString());
		    System.out.println("probleme fichier\n");
		}

		i = 0;
		int copier [] = new int[n*n];
		int k= 0;
		while(i<chaine.length()){
		    String a="";
		    j=i;
		    int cpt=0;
		    while (chaine.charAt(j)!=',' &  chaine.charAt(j)!='\n'){
			a=a+chaine.charAt(j);
			j += 1;
			cpt +=1;
		    }
		    if(! (a.equals(""))){
			copier[k] =Integer.parseInt(a);
			k++;
		    }
		    i+= cpt+1;
		    
		}
		int c = 0; 
		for(i = 0; i<n;i++){
		    for(j=0;j<n;j++){
			matrice[i][j] = copier[c];
			c++;
		    }
		    
		}
		*/
		//afficher(matrice);
		long tempsDebut = System.currentTimeMillis();
		Population pop = new Population(n, true);
		
		System.out.println("Solution initiale : " + pop.getFittest());
		System.out.println("Distance initiale : " + pop.getFittest().getDistance());
		//pop = GA.evoluerPopulation(pop);
		//Evaluer populationde 100 générations
		for (i = 0; i <10000 ; i++) {
		    pop = GA.evoluerPopulation(pop);
		}
		
		System.out.println("Finished");
		System.out.println("Distance finale: " + pop.getFittest().getDistance());
		System.out.println("Solution:");
		System.out.println(pop.getFittest());
		long tempsFin = System.currentTimeMillis();
		
		float seconds = (float)(tempsFin - tempsDebut)/1000 ;
		System.out.println("Opération effectuée en: "+ Float.toString(seconds) + " secondes.");
		   }
    /*  n = n +5;
    }
    }*/
    public static void afficher(int [][] matrice){
	int i, j;
	for (i=0; i<matrice.length; i++){
	    for(j=0;j<matrice.length;j++){	
		System.out.print(matrice[i][j]);
		System.out.print(" | ");
	    }
	    System.out.println("\n");
	}
    }
}
